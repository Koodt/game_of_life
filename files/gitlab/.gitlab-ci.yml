default:
  tags:
    - shell

variables:
  IMAGE_NAME: "life"
  IMAGE_TAG: "latest"

stages:
  - check
  - linter
  - tests
  - prepare
  - kube check
  - kube validate
  - run
  - stop

shell check:
  stage: check
  script:
    - hostname
    - python3 --version

black linter:
  stage: linter
  script:
    - black --diff --check .
  needs:
    - shell check

flake linter:
  stage: linter
  script:
    - flake8 .
  needs:
    - shell check

isort linter:
  stage: linter
  script:
    - isort --check-only --diff .
  needs:
    - shell check

python tests:
  stage: tests
  script:
    - python3 -m pytest --junitxml=report.xml tests/*
  artifacts:
    reports:
      junit: report.xml
    expire_in: 2 week
  needs:
    - black linter
    - flake linter
    - isort linter

coverage tests:
  stage: tests
  script:
    - coverage run -m pytest tests/*
    - coverage report
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 2 week
  needs:
    - python tests

prepare db:
    stage: prepare
    script:
        - python3 database/prepare.py
    needs:
      - coverage tests
    when: manual

prepare image:
  stage: prepare
  variables:
    DOCKER_IMAGE_PATH: $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY
    - docker build -t $DOCKER_IMAGE_PATH image/.
      --build-arg DATABASE_HOST="$DATABASE_HOST"
      --build-arg DATABASE_USER="$DATABASE_USER"
      --build-arg DATABASE_PASSWORD="$DATABASE_PASSWORD"
    - docker push $DOCKER_IMAGE_PATH
  needs:
    - coverage tests

kube check:
  stage: kube check
  script:
    - kubectl version --output=json |jq .

kube validate:
  stage: kube validate
  script:
    - kubeval $KUBE_VALIDATE_FILE
  needs:
    - kube check
    - prepare image

kube run stage:
  stage: run
  script:
    - kubectl apply -f kube/pod.yml
  needs:
    - kube validate
  allow_failure: false

kube run prod:
  stage: run
  script:
    - kubectl apply -f kube/pod.yml
  needs:
    - kube validate
  allow_failure: false
  when: manual

kube stop stage:
  stage: stop
  script:
    - kubectl delete --all pods --grace-period=0 --force
  needs:
    - kube run stage
  when: manual
